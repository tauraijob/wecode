generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  INDIVIDUAL
  STUDENT
  CORPORATE
  ADMIN
}

enum RequestCategory {
  TRAINING
  WORKSHOP
  SCHOOL_CLUB
  SERVICES
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  SCHEDULED
  COMPLETED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Interval {
  MONTHLY
  YEARLY
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  role           Role      @default(INDIVIDUAL)
  hashedPassword String
  phone          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  requests       Request[]
  invoices       Invoice[]
  subscriptions  Subscription[]
  schools        School[]
  magicLinks     MagicLink[]
  quotes         Quote[]
}

model Request {
  id          String         @id @default(cuid())
  category    RequestCategory
  description String?
  status      RequestStatus  @default(PENDING)
  scheduledAt DateTime?
  createdAt   DateTime       @default(now())

  user        User           @relation(fields: [userId], references: [id])
  userId      String

  invoices    Invoice[]
}

model Invoice {
  id         String        @id @default(cuid())
  number     String        @unique
  currency   String        @default("USD")
  amountUsd  Decimal       @db.Decimal(10, 2)
  status     InvoiceStatus @default(DRAFT)
  dueDate    DateTime?
  createdAt  DateTime      @default(now())

  user       User          @relation(fields: [userId], references: [id])
  userId     String

  request    Request?      @relation(fields: [requestId], references: [id])
  requestId  String?

  payments   Payment[]
  school     School?       @relation(fields: [schoolId], references: [id])
  schoolId   String?
}

model Payment {
  id         String        @id @default(cuid())
  currency   String        @default("USD")
  amountUsd  Decimal       @db.Decimal(10, 2)
  status     PaymentStatus @default(PENDING)
  method     String?
  createdAt  DateTime      @default(now())

  invoice    Invoice       @relation(fields: [invoiceId], references: [id])
  invoiceId  String
}

model Subscription {
  id              String    @id @default(cuid())
  name            String
  interval        Interval  @default(MONTHLY)
  nextRenewalDate DateTime?
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id])
  userId          String
}

model School {
  id           String   @id @default(cuid())
  name         String
  contactEmail String
  contactName  String
  phone        String?
  createdAt    DateTime @default(now())

  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   String?
  clubs     Club[]
  invoices  Invoice[]
  quotes    Quote[]
}

enum ClubStatus {
  DRAFT
  ACTIVE
  PAUSED
}

model Club {
  id         String     @id @default(cuid())
  name       String
  level      String
  planId     String
  students   Int
  createdAt  DateTime   @default(now())
  status     ClubStatus @default(DRAFT)

  school   School   @relation(fields: [schoolId], references: [id])
  schoolId String
}

model Quote {
  id         String   @id @default(cuid())
  number     String   @unique
  currency   String   @default("USD")
  totalUsd   Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  data       Json

  user     User    @relation(fields: [userId], references: [id])
  userId   String
  school   School  @relation(fields: [schoolId], references: [id])
  schoolId String
  items    QuoteItem[]
}

model QuoteItem {
  id        String  @id @default(cuid())
  name      String
  unitUsd   Decimal @db.Decimal(10, 2)
  quantity  Int
  lineUsd   Decimal @db.Decimal(10, 2)

  quote   Quote   @relation(fields: [quoteId], references: [id])
  quoteId String
}

model MagicLink {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
